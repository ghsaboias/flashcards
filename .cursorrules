This file provides guidance for working with code in this repository.

## Important Instructions

- Keep this documentation current with the actual implementation
- **NEVER DEPLOY WITHOUT EXPLICIT PERMISSION** - This repository has automatic deployment via GitHub Actions
- **Git Integration**: Changes are automatically deployed when pushed to master branch
- **Deployment Process**: `git commit && git push` triggers automatic deployment to Cloudflare

## Deployment Warnings

⚠️ **CRITICAL**: This repository has automatic deployment enabled via GitHub Actions. 
- Pushing to `master` branch automatically deploys to production
- NEVER use `npm run deploy` or `wrangler deploy` manually
- Always test changes locally before committing
- Use feature branches for major changes

## Running the Application

### Development

```bash
# Frontend (React + Vite)
cd frontend && npm run dev

# Backend (Cloudflare Worker)
cd backend && npm run dev
```

### Production

```bash
# Build and deploy to Cloudflare
cd frontend && npm run build
cd backend && npm run deploy
```

## Code Architecture

Modern web application with Cloudflare Workers backend:

### File Structure

**Frontend (`frontend/`)**

- **src/App.tsx**: Main React application component
- **src/api.ts**: API client for backend endpoints
- **src/components/SrsTable.tsx**: SRS schedule display component
- **src/components/StatsTable.tsx**: Session statistics component

**Backend (`backend/`)**

- **src/worker.ts**: Main Hono application with API routes
- **src/sessions-do.ts**: Durable Object for session management
- **src/srs.ts**: Spaced Repetition System logic
- **src/types.ts**: TypeScript type definitions
- **src/utils/validateAnswer.ts**: Answer validation logic
- **wrangler.toml**: Cloudflare Worker configuration

### Data Files

- **backend/seed-hsk1.sql**: HSK Level 1 seed data (migrated from CSV)
- **backend/seed-hsk2.sql**: HSK Level 2 seed data (migrated from CSV)
- **backend/schema.sql**: D1 database schema for cards, sessions, and SRS data
- **backend/seed-hsk1.sql**: HSK Level 1 seed data

### Directory Structure

```
flashcards/
├── frontend/               # Vite + React frontend
│   ├── src/
│   │   ├── App.tsx
│   │   ├── api.ts
│   │   └── components/
│   └── package.json
├── backend/               # Hono + Cloudflare Worker backend
│   ├── src/
│   │   ├── worker.ts
│   │   ├── sessions-do.ts
│   │   └── srs.ts
│   ├── wrangler.toml
│   └── package.json
└── Recognition_Practice/  # HSK flashcard data
    ├── HSK_Level_1/      # 6 sets, 150 HSK1 words
    └── HSK_Level_2/      # Extended vocabulary
```

## Web App Features

**Core Functionality:**

- **Set/Category Selection**: Choose HSK sets or categories for practice
- **Practice Session**: Interactive flashcard review with answer validation
- **SRS Integration**: Spaced repetition system for optimal review scheduling
- **Statistics Tracking**: View performance metrics and review history
- **Progress Monitoring**: Track learning progress over time

**Practice Modes:**

- **Start Practice**: Review all cards in selected set/category
- **Practice Difficult**: Focus on cards with low accuracy (<80%)
- **Practice SRS**: Review cards due for spaced repetition
- **View SRS**: Display SRS schedule and card statistics

## Technical Implementation

### API Endpoints

**Cards & Sets:**

- `GET /api/sets` - List available flashcard sets
- `GET /api/sets/{id}/cards` - Get cards for a specific set
- `GET /api/categories` - List HSK categories

**Sessions:**

- `POST /api/sessions` - Create new practice session
- `GET /api/sessions/{id}` - Get session state
- `POST /api/sessions/{id}/answer` - Submit answer and get next card

**SRS & Statistics:**

- `GET /api/srs/{set_id}` - Get SRS data for set
- `GET /api/stats/{set_id}` - Get performance statistics

### Answer Validation

- Supports multiple correct answers: `answer1; answer2` or `answer1 or answer2`
- Case-insensitive matching with flexible input handling
- Chinese pinyin validation support

### Database Schema (D1)

**Tables:**

- `cards` - Flashcard data (question, answer, metadata)
- `sessions` - Practice session tracking
- `srs_data` - Spaced repetition scheduling data
- `session_answers` - Individual answer records

## Development Notes

### State Management

- **Frontend**: React state for current session, selected sets/categories
- **Backend**: Durable Objects for persistent session management
- **Database**: D1 for cards, SRS data, and session history

### Key Components

**Frontend (`frontend/src/`):**

- `App.tsx`: Main application with set/category selection and practice modes
- `api.ts`: HTTP client for backend API communication
- `SrsTable.tsx`: Displays SRS scheduling data in tabular format
- `StatsTable.tsx`: Shows session statistics and performance metrics

**Backend (`backend/src/`):**

- `worker.ts`: Main Hono router with API endpoints and static asset serving
- `sessions-do.ts`: Durable Object managing practice session state
- `srs.ts`: Spaced repetition algorithm implementation
- `utils/validateAnswer.ts`: Answer validation with multiple format support

### SRS Algorithm

Uses SM-2 algorithm with modifications:

- **Easiness Factor**: Adjusts based on answer quality (1.3 - 2.5)
- **Interval**: Time between reviews (minutes to months)
- **Repetition Count**: Number of successful reviews
- **Next Review**: Calculated timestamp for next practice

### Deployment

**Cloudflare Workers Configuration:**

- Domain: `game.fasttakeoff.org`
- Assets: Serves built frontend from `../frontend/dist`
- Database: D1 SQLite with migrations
- Durable Objects: Session state persistence
