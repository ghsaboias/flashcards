#!/usr/bin/env python3
"""
Update cards table with network metadata from hsk_network_data.json

Updates hub_score, cluster_role, semantic_domain, and radical_family
for 218 characters in the HSK network.
"""

import json
import sys
from pathlib import Path

def escape_sql(text):
    """Escape single quotes for SQL"""
    if text is None:
        return "NULL"
    return text.replace("'", "''")

def main():
    # Load JSON from frontend public directory
    json_path = Path(__file__).parent.parent / 'frontend' / 'public' / 'hsk_network_data.json'

    if not json_path.exists():
        print(f"Error: {json_path} not found", file=sys.stderr)
        sys.exit(1)

    with open(json_path, 'r', encoding='utf-8') as f:
        data = json.load(f)

    nodes = data.get('nodes', [])

    print("-- Update cards with network metadata from hsk_network_data.json")
    print(f"-- Total characters: {len(nodes)}")
    print("-- Generated: Auto-generated by seed_card_metadata.py")
    print()

    # Track stats
    stats = {'updated': 0, 'anchor': 0, 'branch': 0, 'leaf': 0}

    for i, node in enumerate(nodes, 1):
        char = escape_sql(node['char'])
        hub_score = node.get('hub_score', 0.0)
        cluster_role = node.get('cluster_role', 'leaf')
        semantic_domain = node.get('semantic_domain')
        radical = node.get('radical')

        domain_sql = f"'{escape_sql(semantic_domain)}'" if semantic_domain else "NULL"
        radical_sql = f"'{escape_sql(radical)}'" if radical else "NULL"

        stats['updated'] += 1
        stats[cluster_role] = stats.get(cluster_role, 0) + 1

        print(f"UPDATE cards")
        print(f"SET hub_score = {hub_score},")
        print(f"    cluster_role = '{cluster_role}',")
        print(f"    semantic_domain = {domain_sql},")
        print(f"    radical_family = {radical_sql}")
        print(f"WHERE domain_id = 'chinese' AND question = '{char}';")
        print()

        # Progress marker every 50 rows
        if i % 50 == 0:
            print(f"-- Progress: {i}/{len(nodes)} ({i*100//len(nodes)}%)")
            print()

    print("-- Update complete")
    print(f"-- Statistics:")
    print(f"--   Total updated: {stats['updated']}")
    print(f"--   Anchors: {stats.get('anchor', 0)}")
    print(f"--   Branches: {stats.get('branch', 0)}")
    print(f"--   Leaves: {stats.get('leaf', 0)}")

if __name__ == '__main__':
    main()
